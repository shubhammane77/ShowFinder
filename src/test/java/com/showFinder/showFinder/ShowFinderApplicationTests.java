package com.showFinder.showFinder;

import com.showFinder.showFinder.entity.dao.ShowServicePrimaryDao;
import com.showFinder.showFinder.entity.service.ShowServiceImpl;
import com.showFinder.showFinder.model.data.ShowBasicInfo;
import com.showFinder.showFinder.model.data.ShowInfo;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Matchers.anyString;

import java.io.FileInputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith( SpringJUnit4ClassRunner.class )
@ContextConfiguration
@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ShowFinderApplicationTests {

	@MockBean
	private ShowServicePrimaryDao showServicePrimaryDao;

	@MockBean
	private ShowServiceImpl showService;


	@Autowired
	private WebApplicationContext webApplicationContext;
	private MockMvc mockMvc;

	@BeforeAll
	public void  setUp() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
		ShowInfo show = new ShowInfo(1,"A Quiet place",7.5,2018,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,null);
		ShowInfo show2 = new ShowInfo(2,"A Quiet place 2",7.3,2020,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,null);

		Mockito.when(showServicePrimaryDao.findByShowId(1))
				.thenReturn(Arrays.asList(show));
		ShowBasicInfo showBasicInfo = new ShowBasicInfo(1,"A Quiet place", 2018);
		ShowBasicInfo showBasicInfo2 = new ShowBasicInfo(2,"A Quiet place 2", 2020);

		Mockito.when(showServicePrimaryDao.findPopularShows(PageRequest.of(0, 15)))
				.thenReturn(Arrays.asList(showBasicInfo,showBasicInfo2));
	}

	@Test
	void contextLoads() {
	}

	@Test
	public  void showInfo() throws Exception {
		mockMvc.perform(get("/showInfo/1")
						.contentType(MediaType.APPLICATION_JSON))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(status().isOk())
				.andExpect(content().json("{\n" +
						"    \"errorCode\": null,\n" +
						"    \"errorMessage\": null,\n" +
						"    \"showNames\": [\n" +
						"        {\n" +
						"            \"showId\": 1,\n" +
						"            \"showName\": \"A Quiet place\",\n" +
						"            \"rating\": 7.5,\n" +
						"            \"releaseyear\": 2018,\n" +
						"            \"actionFlag\": false,\n" +
						"            \"comedyFlag\": false,\n" +
						"            \"documentaryFlag\": false,\n" +
						"            \"fantasyFlag\": false,\n" +
						"            \"horrorFlag\": false,\n" +
						"            \"musicalFlag\": false,\n" +
						"            \"romanceFlag\": false,\n" +
						"            \"sportFlag\": false,\n" +
						"            \"animationFlag\": false,\n" +
						"            \"crimeFlag\": false,\n" +
						"            \"historyFlag\": false,\n" +
						"            \"kidsFlag\": false,\n" +
						"            \"thrillerFlag\": true,\n" +
						"            \"scifiFlag\": true,\n" +
						"            \"warFlag\": false,\n" +
						"            \"realityFlag\": false,\n" +
						"            \"image\": \"\"\n" +
						"        }\n" +
						"    ]\n" +
						"}"));
	}

	@Test
	public  void popularShows() throws Exception {
		mockMvc.perform(get("/showInfo/popular")
						.contentType(MediaType.APPLICATION_JSON))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(status().isOk());

	}
}
